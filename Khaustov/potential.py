import numpy as np
from scipy.integrate import quad

def potential_of_side(x, y, z, x1, x2, y1, y2, z1, lambda_):
    """
    Вычисление вклада потенциала от одного участка стороны квадрата.
    
    Аргументы:
        x, y, z: координаты точки наблюдения
        x1, x2: начальная и конечная x-координата стороны
        y1, y2: начальная и конечная y-координата стороны
        z1: z-координата стороны (она постоянна для всей стороны)
        lambda_: линейная плотность заряда
    Возвращает:
        вклад потенциала в данной точке.
    """
    def integrand(t):
        # Линейное параметрическое описание стороны
        x_line = x1 + (x2 - x1) * t
        y_line = y1 + (y2 - y1) * t
        z_line = z1
        r = np.sqrt((x - x_line)**2 + (y - y_line)**2 + (z - z_line)**2)
        return lambda_ / r

    # Интегрируем вдоль стороны
    return quad(integrand, 0, 1)[0]

def potential_square(x, y, z, a, lambda_):
    """
    Вычисление полного потенциала, создаваемого квадратной рамкой.
    
    Аргументы:
        x, y, z: координаты точки наблюдения
        a: длина стороны квадрата
        lambda_: линейная плотность заряда
    Возвращает:
        полный потенциал в точке (x, y, z).
    """
    # Задаем координаты сторон квадрата в плоскости z=0
    sides = [
        (0, a, 0, 0, 0),       # нижняя сторона
        (a, a, 0, a, 0),       # правая сторона
        (a, 0, a, a, 0),       # верхняя сторона
        (0, 0, a, 0, 0)        # левая сторона
    ]

    total_potential = 0

    for x1, x2, y1, y2, z1 in sides:
        total_potential += potential_of_side(x, y, z, x1, x2, y1, y2, z1, lambda_)

    return total_potential

# Пример использования
a = 1.0  # длина стороны квадрата
lambda_ = 1e-6  # линейная плотность заряда (Кл/м)
x, y, z = 0.5, 0.5, 1.0  # координаты точки наблюдения

potential = potential_square(x, y, z, a, lambda_)
print(f"Электростатический потенциал в точке ({x}, {y}, {z}): {potential:.3e} В")
